# 高分值内容看视频： 软件工程，数据库系统，软件架构设计
# 一： 综合知识：
重点章节：软件架构设计，软件工程，知识产权
   法律法规， PV操作，流水线，文件索引，无损有损分解，是否函数依赖，

# 二：案例题
质量属性，软件架构风格，结构分析的数据流图，面向对象建模的用例图，类之间的关系，数据缓存的基本优缺点，分布式
第一题： 质量属性/架构设计
第二题：系统分析与设计/ER图/DFD·图
第三题：嵌入式
第四题：数据库：redis
第五题：web

# 三：论文：
架构方向：重点：架构评估，微服务架构，安全架构；难点：大数据架构，面向服务架构
软件开发：RUP,ABSD，敏捷开发。

========================================================================================================================


# 题型一、质量属性和软件架构

## 质量属性
质量属性效用树是对系统质量属性进行识别和优先级排序的重要工具。
效用：性能；安全性；可用性；可修改性。

## 软件架构：

软件架构风格是描述特定软件系统组织方式的惯用模式，它定义了一个词汇表和一组约束，包含构件和连接件类型，指导系统如何将他们组合起来，反应了领域中众多系统的结构和语义特性，有助于有效地组织各个模块和子系统成为完整的系统，研究和实践软件体系结构风格可以促进`设计`的重用。


1. MVC架构风格：
用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件
里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。
MVC 架构将整个软件系统划分为模型、视图和控制器 3 个部分。模型负责维护并保存具有持久性的业
务数据，实现业务处理功能，并将业务数据的变化情况及时通知视图；视图负责呈现模型中包含的业务数据，
响应模型变化通知，更新呈现形式，并向控制器传递用户的界面动作；控制器负责将用户的界面动作映射为
模型中的业务处理功能并实际调用之，然后根据模型返回的业务处理结果选择新的视图。

2. 面向资源架构：
表现层状态转换（REST）是面向资源架构的核心思想，REST 从资源的角度来定义整个网络系统结构，分布在各处的资源由统一资源标识符（URI）确定，客户端应用程序通过 URI 获取资源的表现，并通过获得资源表现使得其状态发生改变
REST 中将资源、资源的表现和获取资源的动作三者进行分离

3. 主程序-子程序架构风格：
所有的计算构件作为子程序协作工作，并由一个主程序顺序地调用这些子程序，构件通过共享存储区交换数据。

4. 管道-过滤器架构风格：
每个构件都有一组输入和输出，构件接受数据输入，经过内部处理，然
后产生数据输出。这里的构件称为过滤器，构件之间的连接件称为数据流传输的管道

企业服务总线ESB：
（1）应用程序的位置透明性
（2）传输协议转换
（3）消息格式转换
（4）消息路由
（5）消息增强
（6）安全支持
（7）监控和管理

面向服务的方式： 将工具的功能包装为服务，可以共享系统的功能以及跨语言跨系统。
基于消息总线，以协议及数据适配器的方式：实现灵活的通信协议和数据格式转换。
解释器架构风格：引入工作流定义语言及其引擎来动态描述工具之间的协作关系。
界面集成方法：绕过工具内部复杂处理逻辑对第三方工具进行功能集成。
适配器设计模式：实现数据的灵活转换，

ABSD，Architecture-Based Software Design-基于架构的软件开发方法：强调由商业、质量、功能需求的组合驱动软件架构设计。强调采用视角和视图来描述软件架构，采用用例和质量场景来描述需求。ABSD是一个自顶向下，递归细化的软件开发方法，软件系统的体系结构通过该方法得到细化，知道能产生软件构件和类。以软件系统功能的分解为基础，通过选择架构风格实现质量和商业需求，并强调在架构设计过程中使用软件架构模板。
ATAM,Architecture Tradeoff Analysis Method-构架权衡分析方法
RUP（Rational Unified Process），统一软件开发过程，统一软件过程是一个面向对象且基于网络的程序开发方法论，RUP 中的软件过程在时间上被分解为四个顺序的阶段，分别是初始阶段、细化阶段、构建阶段和交付阶段。每个阶段结束时都要安排一次技术评审，以确定这个阶段的目标是否已经满足。如果评审结果令人满意，就可以允许项目进入下一个阶段。


SOA

层次风格



# 题型二、系统需求分析：
用例是对系统行为的动态描述，用例之间的关系：包含，扩展，泛化。
类之间的关系：关联，聚合，组合，依赖，泛化/继承，实现。

非功能性需求：操作性需求、性能需求、安全性需求和文化需求。
性能需求（PerformanceRequirements）：指响应时间、吞吐量、准确性、有效性、资源利用率等与系统完成任务效率相关的指标。可靠性、可用性等指标可归为此类。
安全性需求（Security Requirements）：系统向合法用户提供服务并阻止非授权用户使用服务方面的系统需求。用户安全和数据安全
操作性需求（Operational Requirements）：与用户操作使用系统相关的一些需求。
文化需求（Cultural Requirements）：带有文化背景因素的系统需求，国际化和本土化。

状态图和活动图的区别：
状态图主要用于描述一个对象在其生存期间的动态行为，表现一个对象所经历的状态序列，引起状态转移的
事件（event），以及因状态转移而伴随的动作（action）。
活动图可以用于描述系统的工作流程和并发行为。活动图其实可看作状态图的特殊形式，活动图中一个活动
结束后将立即进入下一个活动（在状态图中状态的转移可能需要事件的触发）。
两者最大的区别是：状态图侧重于描述行为的结果，而活动图侧重描述行为的动作。其次活动图可描述并发
行为，而状态图不能。


数据流图Data Flow Diagram，DFD的基本元素：
数据流：数据流是数据在系统内传播的路径，因此由一组成分固定的数据组成。
外部实体：代表系统之外的实体，可以是人、物或其他软件系统。
加工（处理）：加工是对数据进行处理的单元，它接收一定的数据输入，对其进行处理，并产生输
出。
数据存储：表示信息的静态存储，又叫做文件，可以是文件、文件的一部分、数据库的元素等。

========================================================================================================
# 题型三、嵌入式：放弃
# 题型四、数据库

当数据库对数据模型进行规范化处理后，会发现这些经过规范化
处理的模型在进行查询操作时效果并不理想。因为经过规范化处理的数据模型形成了一系列的小表，每个表的
数据量较小，进行查询操作时往往需要应用程序对这些表进行动态的连接操作，这就要在不同的表中进行多次
I/O 操作。表的连接操作对于较少的，小容量表也许不会产生较大的影响，但是对于数据量十分庞大的数据库，
这种多表连接操作在时间上是很难让用户接受的。此时，提高效率的最好方法就是使这些小表合并在一起，这
就是数据的反规范化处理。

反规范化技术：
规范化设计后，数据库设计者希望牺牲部分规范化来提高性能，这种从规范化设计的回退方法称为反规范化技术。
采用反规范化技术的益处：降低连接操作的需求、降低外码和索引的数目，还可能减少表的数目，能够提高查询效率。
可能带来的问题：数据的重复存储，浪费了磁盘空间；可能出现数据的完整性问题，为了保障数据的一致性，增加了数据维护的复杂性，会降低修改速度。

分类：
（1）增加冗余列：在多个表中保留相同的列，通过增加数据冗余减少或避免查询时的连接操作。
（2）增加派生列：在表中增加可以由本表或其它表中数据计算生成的列，减少查询时的连接操作并
避免计算或使用集合函数。
（3）重新组表：如果许多用户需要查看两个表连接出来的结果数据，则把这两个表重新组成一个表
来减少连接而提高性能。
（4）水平分割表：根据一列或多列数据的值，把数据放到多个独立的表中，主要用于表数据规模很
大、表中数据相对独立或数据需要存放到多个介质上时使用。
（5）垂直分割表：对表进行分割，将主键与部分列放到一个表中，主键与其它列放到另一个表中，
在查询时减少 I/O 次数。

# 题型五、数据库